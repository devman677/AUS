
import tensorflow as tf
from tensorflow import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import random
from tensorflow.keras.datasets import cifar10
%matplotlib inline



#import dataset and split into train and test data
(x_train, y_train), (x_test, y_test) = cifar10.load_data()








plt.matshow(x_train[0])






plt.imshow(-x_train[0], cmap="gray")






x_train = x_train / 255
x_test = x_test / 255






model = keras.Sequential([
keras.layers.Flatten(input_shape=(32, 32,3)),
keras.layers.Dense(128, activation="relu"),
keras.layers.Dense(10, activation="softmax")
])

model.summary()





model.compile(optimizer="sgd",
loss="sparse_categorical_crossentropy",
metrics=['accuracy'])




history=model.fit(x_train,
y_train,validation_data=(x_test,y_test),epochs=10)







test_loss,test_acc=model.evaluate(x_test,y_test)
print("Loss=%.3f" %test_loss)
print("Accuracy=%.3f" %test_acc)







n=random.randint(0,9999)
plt.imshow(x_test[n])
plt.show()






x_train






predicted_val = model.predict(x_test)
print(predicted_val[n])
maximum = -1
index = -1
for i in (0,9):
    if maximum<predicted_val[n][i]:
        maximum = predicted_val[n][i]
        index = i
        
print(index)






plt.imshow(x_test[n])
plt.show()

print(predicted_val[n])





if index == 0:
    print("airplane")
if index == 1:
    print("automobile")
if index == 2:
    print("bird")
if index == 3:
    print("cat")
if index == 4:
    print("deer")
if index == 5:
    print("dog")
if index == 6:
    print("frog")
if index == 7:
    print("horse")
if index == 8:
    print("ship")
if index == 9:
    print("truck")





# history.history()
history.history.keys()
# dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()






# history.history()
history.history.keys()
# dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Validation'], loc='upper left')
plt.show()